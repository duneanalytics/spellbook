version: 2

models:
  - name: labels_sandwich_attackers
    meta:
      blockchain: ethereum
      sector: labels
      category: sandwich_attackers
      contibutors: alexth
    config:
      tags: ['labels', 'sandwich', 'bot','sandwich_attackers', 'dex']
    description: "Known sandwich attacker contracts across chains"
    columns:
      - &blockchain
        name: blockchain
        description: "Blockchain"   
      - &address
        name: address
        description: "Address of known sandwich attacker contract"
      - &name
        name: name
        description: "Label name (Sandwich attacker)"
      - &category
        name: category
        description: "Label category (sandwich_attackers)"
      - &contributor
        name: contributor
        description: "Wizard(s) contributing to labels"
      - &source
        name: source
        description: "How were labels generated (query)"
      - &created_at
        name: created_at
        description: "When were labels created"
      - &updated_at
        name: updated_at
        description: "When were labels updated for the last time"

  - name: labels_sandwich_attackers_ethereum
    meta:
      blockchain: ethereum
      sector: labels
      category: sandwich_attackers
      contibutors: alexth
    config:
      tags: ['labels', 'ethereum', 'sandwich', 'bot','sandwich_attackers', 'dex']
    description: "Known sandwich attacker addresses on Ethereum

      The logic to identify a sandwich attacker is as follows:

        1. Two separate trades, t1 and t2 in no particular order, in the same block initiated by the same address
        2. Both trades inititated on the same project
        3. Token bought in t1 = token sold in t2
        4. Token sold in t1 = token bought in t2
        5. Amount bought in t1 = Amount sold in t2
        6. Amount sold in t1 < amount bought in t2 (excluded)
        7. (index of t1 >= index of t2 + 2) or (index of t2 >= index of t1 + 2)
        8. Exclude uniswap v2 router address since this gets included as a false positive for some reason
        
      This logic should work to include both buy-first and less common sell-first sandwiches
      By excluding point 6, we also include sandwich attacks that made a loss
      By using '>=' instead of just '=' in point 7, we can also include sandwich attackers that are perhaps not using flashbots and not tightly bundling their transactions"
    columns:
      - *blockchain
      - *address
      - *name
      - *category
      - *contributor
      - *source
      - *created_at
      - *updated_at
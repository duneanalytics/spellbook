{{ config(
    alias='erc20_generated',
    post_hook='{{ expose_spells(\'["optimism"]\',
                                    "sector",
                                    "tokens",
                                    \'["msilb7"]\') }}')}}

-- Pull tokens deterministically generated by contracts
with generated_tokens_list AS (
SELECT contract_address, symbol, MIN(decimals) AS decimals, token_type, token_mapping_source

FROM (

    SELECT
    LOWER(l2_token) AS contract_address, l1_symbol AS symbol, l1_decimals as decimals
    , 'underlying' as token_type, 'l2 bridge mapping' AS token_mapping_source
    FROM {{ ref('tokens_optimism_erc20_bridged_mapping') }}
    WHERE l1_symbol IS NOT NULL

    UNION ALL

    SELECT
    LOWER(atoken_address) AS contract_address, atoken_symbol AS symbol, atoken_decimals as decimals
    , 'receipt' as token_type, 'aave factory' AS token_mapping_source
    FROM {{ ref('aave_v3_tokens') }}
      WHERE blockchain = 'optimism'
    
    UNION ALL

    SELECT
    LOWER(atoken_address) AS contract_address, atoken_symbol AS symbol, atoken_decimals as decimals
    , 'receipt' as token_type, 'the granary factory' AS token_mapping_source
    FROM {{ ref('the_granary_optimism_tokens') }}
      WHERE blockchain = 'optimism'
    
    UNION ALL

    SELECT
    LOWER(vault_token) AS contract_address, vault_symbol AS symbol, 18 as decimals
    , 'receipt' as token_type, 'yearn vault factory' AS token_mapping_source
    FROM {{ ref('yearn_optimism_vaults') }}
      WHERE blockchain = 'optimism'
    
  ) a
  GROUP BY contract_address, symbol, token_type, token_mapping_source --get uniques & handle if L2 token factory gets decimals wrong
)

SELECT LOWER(contract_address) AS contract_address
      , symbol
      , decimals
      , token_type
      , token_mapping_source

    FROM (
      SELECT contract_address, symbol, decimals, token_type, token_mapping_source
        FROM generated_tokens_list  
    ) a

from dataclasses import dataclass


@dataclass
class Blockchain:
    name: str
    native_contract_address: str = None
    wrapped_token_deposit: str = None
    wrapped_token_withdrawal: str = None
    native_symbol: str = None

# TODO: Put these into a global config file at some point
blockchains = [
    Blockchain("arbitrum", native_symbol="ETH"),
    Blockchain("avalanche_c", native_symbol="AVAX"),
    Blockchain("base", native_symbol="ETH"),
    Blockchain("bnb", None, "source('bnb_bnb.WBNB_evt_Deposit')", "source('bnb_bnb.WBNB_evt_Withdrawal')", "BNB"),
    Blockchain("celo", native_symbol="CELO"),
    Blockchain(
        "ethereum",
        "'0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'",
        "source('zeroex_ethereum', 'weth9_evt_deposit')",
        "source('zeroex_ethereum', 'weth9_evt_withdrawal')",
        "ETH",
    ),
    Blockchain("fantom", native_symbol="FTM"),
    Blockchain("gnosis", native_symbol="xDAI"),
    Blockchain("optimism", native_symbol="ETH"),
    Blockchain(
        "polygon",
        None,
        "source('mahadao_polygon', 'wmatic_evt_deposit')",
        "source('mahadao_polygon', 'wmatic_evt_withdrawal')",
        "MATIC",
    ),
    Blockchain("zksync", native_contract_address="'0x000000000000000000000000000000000000800a'" native_symbol="ETH"),
]

if_null = lambda x: x if x else "null"

transfers_base_template = """{{## GENERATED BY scripts/template/generate_transfers.py ##}}
{{{{config(
    schema = 'tokens_{blockchain}',
    alias = 'transfers_base',
    partition_by = ['token_standard', 'block_date'],
    materialized = 'incremental',
    file_format = 'delta',
    incremental_strategy = 'merge',
    incremental_predicates = [incremental_predicate('DBT_INTERNAL_DEST.block_time')],
    unique_key = ['unique_key'],
)
}}}}

{{{{transfers_base(
    blockchain='{blockchain}',
    traces = source('{blockchain}','traces'),
    transactions = source('{blockchain}','transactions'),
    erc20_transfers = source('{token_standard}_{blockchain}','evt_transfer'),
    native_contract_address = {native_contract_address},
    wrapped_token_deposit = {wrapped_token_deposit},
    wrapped_token_withdrawal = {wrapped_token_withdrawal},
)
}}}}
"""

## TODO: expose
transfers_enrich = """{{## GENERATED BY scripts/template/generate_transfers.py ##}}
{{{{config(
    schema = 'tokens_{blockchain}',
    alias = 'transfers',
    materialized = 'view',
)
}}}}

{{{{transfers_enrich(
    blockchain='{blockchain}',
    transfers_base = ref('tokens_{blockchain}_transfers_base'),
    native_symbol = '{native_symbol}'
)}}}}
"""

PATH = "./models/tokens/"


def generate_transfers_base(
    blockchain: str,
    native_contract_address: str = None,
    wrapped_token_deposit: str = None,
    wrapped_token_withdrawal: str = None,
):
    token_standard = "erc20" if blockchain != "bnb" else "bep20"
    transfers_base_formatted = transfers_base_template.format(
        blockchain=blockchain,
        native_contract_address=if_null(native_contract_address),
        wrapped_token_deposit=if_null(wrapped_token_deposit),
        wrapped_token_withdrawal=if_null(wrapped_token_withdrawal),
        token_standard=token_standard,
    )

    output = transfers_base_formatted

    with open(f"{PATH}{blockchain}/tokens_{blockchain}_transfers_base.sql", "w") as f:
        f.write(output)


def generate_transfers_enrich(blockchain: str, native_symbol: str = None):
    output = transfers_enrich.format(blockchain=blockchain, native_symbol=if_null(native_symbol))

    with open(f"{PATH}{blockchain}/tokens_{blockchain}_transfers.sql", "w") as f:
        f.write(output)


for blockchain in blockchains:
    print(f"Generating transfers for {blockchain}")
    generate_transfers_base(
        blockchain.name,
        blockchain.native_contract_address,
        blockchain.wrapped_token_deposit,
        blockchain.wrapped_token_withdrawal,
    )
    generate_transfers_enrich(blockchain.name, blockchain.native_symbol)

import json
import requests
import os

def get_tables_from_manifest(manifest_path):
    """
    returns a csv of tables from a manifest file. We filter out
    """
    table_csv_str = "schema, name, path, tag\n"
    with open(manifest_path, "r") as f:
        # print(f"Loading manifest file at {manifest_path} ...")
        manifest = json.load(f)
        legacy_count = dunecount = 0

    for node_name in manifest["nodes"]:
        node_data = manifest["nodes"][node_name]
        
        if node_data["resource_type"] == "model":
            schema = node_data["schema"]
            name = node_data["alias"]
            path = node_data["original_file_path"]
            row = ""
            # print(node_data["original_file_path"], node_data["tags"])
            if 'legacy' in node_data["tags"]:
                row = f"{schema}, {name}, {path}, legacy\n"
                legacy_count += 1
            elif 'dunesql' in node_data["tags"]:
                row = f"{schema}, {name}, {path}, dunesql\n"
                dunecount += 1
            else:
                row = f"{schema}, {name}, {path}, none\n"
            table_csv_str += row

    print(f"{legacy_count} legacy and {dunecount} dunesql models found")
    return table_csv_str

def upload_csv(table_csv, target):
    """
    Upload CSV string to dune.

    target = name of table to upload csv to
    """

    print(f"Writing {target} to Dune.com ...")
    url = 'https://api.dune.com/api/v1/table/upload/csv'
    api_key = os.environ.get('DUNE_API_KEY_PROD')
    if not api_key:
        raise Exception('DUNE_API_KEY_PROD environment variable not set!')
    headers = {'X-Dune-Api-Key': api_key}
    payload = {
        "table_name": target,
        "description": "Tables generated by Spark Spellbook.",
        "data": table_csv
    }
    response = requests.post(url, data=json.dumps(payload), headers=headers)
    if response.status_code == 200 and response.json()['success']:
        print(f'Success writing CSV to dune_upload.{target} ', flush=True)
    else:
        print('Error writing CSV to Dune.com!')
        raise Exception(response.content)
    
if __name__ == "__main__":
    table = get_tables_from_manifest("manifest.json")
    upload_csv(table, "migration_status")
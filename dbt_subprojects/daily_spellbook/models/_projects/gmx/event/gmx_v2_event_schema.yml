version: 2

models:
  - name: gmx_v2_order_created
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'order_created']
    description: |
      Extracts and decodes the `OrderCreated` event log data from the Arbitrum and Avalanche blockchains. 
      This model processes log entries related to created orders, extracting key variables such as 
      account addresses, event keys, and strings representing the reason for cancellation.
    data_tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - tx_hash
            - index

    columns:
      - &blockchain  
        name: blockchain
        description: The blockchain network where the event occurred
        data_tests:
          - not_null
      - &block_time
        name: block_time
        description: The timestamp of the block when the event was recorded
        data_tests:
          - not_null
      - &block_date
        name: block_date
        description: The date extracted from the block timestamp, representing the day the block was created
        data_tests:
          - not_null             
      - &block_number
        name: block_number
        description: The block number where the event is included
        data_tests:
          - not_null
      - &tx_hash
        name: tx_hash
        description: The hash of the transaction where the event was logged
        data_tests:
          - not_null
      - &index
        name: index
        description: The position of the event within the transaction
        data_tests:
          - not_null 
      - &contract_address
        name: contract_address
        description: The contract address associated with the event
        data_tests:
          - not_null 
      - &tx_from
        name: tx_from
        description: The originating address of the transaction, usually representing the sender
        data_tests:
          - not_null
      - &tx_to
        name: tx_to
        description: The destination address of the transaction, representing the receiver
        data_tests:
          - not_null                    
      - name: event_name
        description: The type of event recorded, always 'OrderCreated' for this model.
        data_tests:
          - not_null
      - &msg_sender
        name: msg_sender
        description: The address of the sender of the message or transaction.
        data_tests:
          - not_null
      - name: account
        description: The address associated with the order.
      - name: receiver
        description: The address designated as the receiver in the order.
        data_tests:
          - not_null
      - name: callback_contract
        description: The contract address for callback functions.
        data_tests:
          - not_null        
      - name: ui_fee_receiver
        description: The address designated to receive UI fees.
        data_tests:
          - not_null        
      - name: market
        description: The market in which the order was created.
        data_tests:
          - not_null        
      - name: initial_collateral_token
        description: The token used as initial collateral in the order.
        data_tests:
          - not_null        
      - name: swap_path
        description: JSON array of markets through which the swap was routed.
        data_tests:
          - not_null  
      - &order_type    
        name: order_type
        description: |
          The type of order executed. The following table describes each order type:
          - MarketSwap: Swap token A to token B at the current market price. The order will be cancelled if the minOutputAmount cannot be fulfilled.
          - LimitSwap: Swap token A to token B if the minOutputAmount can be fulfilled.
          - MarketIncrease: Increase position at the current market price. The order will be cancelled if the position cannot be increased at the acceptablePrice.
          - LimitIncrease: Increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled.
          - MarketDecrease: Decrease position at the current market price. The order will be cancelled if the position cannot be decreased at the acceptablePrice.
          - LimitDecrease: Decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled.
          - StopLossDecrease: Decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled.
          - Liquidation: Allows liquidation of positions if the criteria for liquidation are met.
        data_tests:
          - not_null
          - accepted_values:
              values: ['MarketSwap','LimitSwap','MarketIncrease','LimitIncrease','MarketDecrease','LimitDecrease','StopLossDecrease','Liquidation']
      - name: decrease_position_swap_type
        description: |
          The type of swap for decreasing position, with possible values:
          - 'NoSwap'
          - 'SwapPnlTokenToCollateralToken'
          - 'SwapCollateralTokenToPnlToken'
      - &size_delta_usd
        name: size_delta_usd
        description: The change in position size in USD
        data_tests:
          - not_null
      - name: initial_collateral_delta_amount
        description: The change in initial collateral amount.
        data_tests:
          - not_null
      - &trigger_price_raw
        name: trigger_price_raw
        description: The original trigger price that initiates order execution before adjustments.
      - &trigger_price
        name: trigger_price
        description: The adjusted trigger price based on the index token decimals, ensuring correct scaling of the value.
      - &acceptable_price_raw 
        name: acceptable_price_raw
        description: The original minimum acceptable price for order execution before adjustments.
      - &acceptable_price
        name: acceptable_price
        description: The adjusted acceptable price based on the index token decimals, ensuring correct scaling of the value.     
      - name: execution_fee
        description: The fee paid for executing the order in native tokens
        data_tests:
          - not_null        
      - name: callback_gas_limit
        description: The gas limit set for callback functions.
        data_tests:
          - not_null   
      - &min_output_amount_raw     
        name: min_output_amount_raw
        description: The minimum amount of output tokens expected from the order, based on the markets in the swap path.
        data_tests:
          - not_null        
      - name: updated_at_block
        description: The block number at which the order was last updated.
      - &updated_at_time       
        name: updated_at_time
        description: The timestamp when the order was last updated.
      - name: valid_from_time
        description: The time from which the order becomes valid for execution.
      - &is_long
        name: is_long
        description: A boolean indicating whether the position is long
        data_tests:
          - not_null
      - name: should_unwrap_native_token
        description: Boolean indicating if the native token should be unwrapped.
      - name: auto_cancel
        description: Boolean indicating whether the order will be automatically canceled under certain conditions.
      - &key
        name: key
        description: The unique identifier for the order, stored as a bytes32 value.
        data_tests:
          - not_null
          - unique


  - name: gmx_v2_order_executed
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'order_executed']
    description: |      
      Extracts and decodes the `OrderExecuted` event log data from the Arbitrum and Avalanche blockchains. 
      This model processes log entries related to executed orders, extracting key variables such as 
      account addresses, event keys, and integer values.
    
    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to
      - name: event_name
        description: The type of event recorded, always 'OrderExecuted' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - *key
      - name: account
        description: The address associated with the order
      - name: secondary_order_type
        description: |
          The type of secondary order associated with the executed order. 
          This column indicates the nature of any additional order handling or adjustments made. 
          
          The `secondary_order_type` is represented as an unsigned integer with the following possible values:
          - `0`: **None** - No secondary order type is applied.
          - `1`: **Adl (Auto-Deleveraging)** - Indicates that the order is associated with the Auto-Deleveraging mechanism. ADL is used to manage risk by automatically reducing or closing positions that are at risk of liquidation due to insufficient margin or other factors. This mechanism helps in maintaining the stability of the trading platform.
        data_tests:
          - not_null


  - name: gmx_v2_order_cancelled
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'order_cancelled']
    description: |
      Extracts and decodes the `OrderCancelled` event log data from the Arbitrum and Avalanche blockchains. 
      This model processes log entries related to cancelled orders, extracting key variables such as 
      account addresses, event keys, and strings representing the reason for cancellation.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to
      - name: event_name
        description: The type of event recorded, always 'OrderCancelled' for this model
        data_tests:
          - not_null 
      - *msg_sender         
      - *key
      - name: account
        description: The address associated with the order 
      - name: reason_bytes
        description: The reason for the cancellation in byte format.
        data_tests:
          - not_null
      - name: reason
        description: The reason for the cancellation in string format.
        data_tests:
          - not_null


  - name: gmx_v2_market_created
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'market_created']
    description: |
      This model extracts and parses `MarketCreated` events from the Arbitrum and Avalanche blockchains.
      It includes transaction details, addresses, and other relevant metrics related to 
      the creation of markets within the GMX protocol.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to
      - name: event_name
        description: The type of event recorded, always 'MarketCreated' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: account
        description: The address associated with the event
      - &market_token
        name: market_token
        description: The token used to represent the market
        data_tests:
          - not_null
          - unique
      - &index_token
        name: index_token
        description: The token used as the index in the market
        data_tests:
          - not_null
      - &long_token
        name: long_token
        description: The token used for long positions in the market
        data_tests:
          - not_null
      - &short_token
        name: short_token
        description: The token used for short positions in the market
        data_tests:
          - not_null
      - &salt
        name: salt
        description: A unique value used to prevent hash collisions
        data_tests:
          - not_null
      - &spot_only
        name: spot_only
        description: Indicates if the market is spot-only (true when index_token is the zero address)
        data_tests:
          - not_null          
      - &market_token_symbol
        name: market_token_symbol
        description: The symbol of the market token (hardcoded as 'GM' in this model)  
        data_tests:
          - not_null    
      - &market_token_decimals
        name: market_token_decimals
        description: The decimal precision of the market token (hardcoded as 18 in this model)          
        data_tests:
          - not_null         


  - name: gmx_v2_position_increase
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum','avalanche_c','gmx','event','position_increase']
    description: |
      This model extracts and parses `PositionIncrease` events from the Arbitrum and Avalanche blockchains.
      It includes transaction details, addresses, and various metrics related to the event, 
      such as market data, collateral amounts, price impacts, and more.
    
    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to   
      - name: event_name
        description: The type of event recorded, always 'PositionIncrease' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: account
        description: The address associated with the event
      - name: market
        description: The market associated with the position increase
        data_tests:
          - not_null
      - name: collateral_token
        description: The collateral token used in the position increase
        data_tests:
          - not_null
      - &size_in_usd
        name: size_in_usd
        description: The size of the position in USD
        data_tests:
          - not_null
      - &size_in_tokens
        name: size_in_tokens
        description: The size of the position in index tokens
        data_tests:
          - not_null
      - name: collateral_amount
        description: The amount of collateral in the position after it was increased
        data_tests:
          - not_null
      - &borrowing_factor
        name: borrowing_factor
        description: The cumulative borrowing factor applied to the position over time
        data_tests:
          - not_null
      - &funding_fee_amount_per_size
        name: funding_fee_amount_per_size
        description: The cumulative funding fee amount per size
        data_tests:
          - not_null
      - &long_token_claimable_funding_amount_per_size
        name: long_token_claimable_funding_amount_per_size
        description: The cumulative claimable funding amount per size for long tokens
        data_tests:
          - not_null
      - &short_token_claimable_funding_amount_per_size
        name: short_token_claimable_funding_amount_per_size
        description: The cumulative claimable funding amount per size for short tokens
        data_tests:
          - not_null
      - &execution_price
        name: execution_price
        description: The execution price of the position after price impact
        data_tests:
          - not_null
      - &index_token_price_max
        name: index_token_price_max
        description: The maximum price of the index token during the event
        data_tests:
          - not_null
      - &index_token_price_min
        name: index_token_price_min
        description: The minimum price of the index token during the event
        data_tests:
          - not_null
      - &collateral_token_price_max
        name: collateral_token_price_max
        description: The maximum price of the collateral token during the event
        data_tests:
          - not_null
      - &collateral_token_price_min
        name: collateral_token_price_min
        description: The minimum price of the collateral token during the event
        data_tests:
          - not_null
      - *size_delta_usd
      - &size_delta_in_tokens
        name: size_delta_in_tokens
        description: The change in position size in tokens
        data_tests:
          - not_null
      - *order_type
      - name: increased_at_time
        description: The block timestamp when the position was increased
      - &collateral_delta_amount
        name: collateral_delta_amount
        description: The change in collateral amount
        data_tests:
          - not_null
      - &price_impact_usd
        name: price_impact_usd
        description: The impact on price in USD
        data_tests:
          - not_null
      - &price_impact_amount
        name: price_impact_amount
        description: The impact on price in index token amount
        data_tests:
          - not_null
      - *is_long
      - &order_key
        name: order_key
        description: A unique key identifying the order
        data_tests:
          - not_null
          - unique
      - &position_key
        name: position_key
        description: A unique key identifying the position


  - name: gmx_v2_position_decrease
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum','avalanche_c','gmx','event','position_decrease']
    description: |
      This model extracts and parses `PositionDecrease` events from the Arbitrum and Avalanche blockchains.
      It includes transaction details, addresses, and various metrics related to the event, 
      such as market data, collateral amounts, price impacts, and more.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to
      - name: event_name
        description: The type of event recorded, always 'PositionDecrease' for this model
        data_tests:
          - not_null  
      - *msg_sender
      - name: account
        description: The address associated with the event
      - name: market
        description: The market associated with the position decrease
        data_tests:
          - not_null
      - name: collateral_token
        description: The collateral token used in the position decrease
        data_tests:
          - not_null
      - *size_in_usd
      - *size_in_tokens
      - name: collateral_amount
        description: The amount of collateral in the position after it was decreased
        data_tests:
          - not_null
      - *borrowing_factor
      - *funding_fee_amount_per_size
      - *long_token_claimable_funding_amount_per_size
      - *short_token_claimable_funding_amount_per_size
      - *execution_price
      - *index_token_price_max
      - *index_token_price_min
      - *collateral_token_price_max
      - *collateral_token_price_min
      - *size_delta_usd
      - *size_delta_in_tokens
      - *collateral_delta_amount
      - &impact_diff_usd
        name: impact_diff_usd
        description: The difference in price impact in USD compared to a baseline or previous value, considering the maximum price impact limit
        data_tests:
          - not_null       
      - *order_type 
      - &decreased_at_time
        name: decreased_at_time
        description: The block timestamp when the position was decreased             
      - *price_impact_usd
      - &base_pnl_usd
        name: base_pnl_usd
        description: The base profit and loss in USD for the position
        data_tests:
          - not_null
      - &uncapped_base_pnl_usd
        name: uncapped_base_pnl_usd
        description: The uncapped base profit and loss in USD, without any limits or caps applied
        data_tests:
          - not_null      
      - *is_long
      - *order_key
      - *position_key


  - name: gmx_v2_position_fees_collected
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum','avalanche_c', 'gmx', 'event', 'position_fees_collected']
    description: |
      This model extracts and parses `PositionFeesCollected` events from the Arbitrum and Avalanche blockchains.
      It includes details about the transaction, addresses involved, and various metrics related to 
      fees collected from positions, including fee amounts and related market data.
    
    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to
      - name: event_name
        description: The type of event recorded, always 'PositionFeesCollected' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: market
        description: The market associated with the position fees collected event
        data_tests:
          - not_null
      - name: collateral_token
        description: The collateral token used in the position fees collected event
        data_tests:
          - not_null
      - &affiliate
        name: affiliate
        description: The affiliate address
        data_tests:
          - not_null
      - &trader
        name: trader
        description: The trader's address
        data_tests:
          - not_null
      - &ui_fee_receiver
        name: ui_fee_receiver
        description: The address receiving the UI fee
        data_tests:
          - not_null
      - *collateral_token_price_min
      - *collateral_token_price_max      
      - &trade_size_usd
        name: trade_size_usd
        description: The size of the trade in USD
        data_tests:
          - not_null        
      - &funding_fee_amount
        name: funding_fee_amount
        description: The amount of funding fee charged
        data_tests:
          - not_null
      - &claimable_long_token_amount
        name: claimable_long_token_amount
        description: The amount of long tokens claimable
      - &claimable_short_token_amount
        name: claimable_short_token_amount
        description: The amount of short tokens claimable
      - &latest_funding_fee_amount_per_size
        name: latest_funding_fee_amount_per_size
        description: The latest funding fee amount per size
      - &latest_long_token_claimable_funding_amount_per_size
        name: latest_long_token_claimable_funding_amount_per_size
        description: The latest claimable long token funding amount per size
      - &latest_short_token_claimable_funding_amount_per_size
        name: latest_short_token_claimable_funding_amount_per_size
        description: The latest claimable short token funding amount per size
      - &borrowing_fee_usd
        name: borrowing_fee_usd
        description: The borrowing fee amount in USD
        data_tests:
          - not_null
      - &borrowing_fee_amount
        name: borrowing_fee_amount
        description: The amount of borrowing fee charged
        data_tests:
          - not_null
      - &borrowing_fee_receiver_factor
        name: borrowing_fee_receiver_factor
        description: The factor used to calculate the borrowing fee amount for the fee receiver
        data_tests:
          - not_null
      - &borrowing_fee_amount_for_fee_receiver
        name: borrowing_fee_amount_for_fee_receiver
        description: The amount of borrowing fee allocated for the fee receiver
        data_tests:
          - not_null
      - &position_fee_factor
        name: position_fee_factor
        description: The fee factor for the position
        data_tests:
          - not_null
      - &protocol_fee_amount
        name: protocol_fee_amount
        description: The amount of protocol fee charged
        data_tests:
          - not_null
      - &position_fee_receiver_factor
        name: position_fee_receiver_factor
        description: The factor used to calculate the position fee amount for the receiver
        data_tests:
          - not_null
      - &fee_receiver_amount
        name: fee_receiver_amount
        description: The amount of fee received by the fee receiver
        data_tests:
          - not_null
      - &fee_amount_for_pool
        name: fee_amount_for_pool
        description: The amount of fee allocated for the pool
        data_tests:
          - not_null
      - &position_fee_amount_for_pool
        name: position_fee_amount_for_pool
        description: The amount of position fee allocated for the pool
        data_tests:
          - not_null
      - &position_fee_amount
        name: position_fee_amount
        description: The total position fee amount
        data_tests:
          - not_null
      - &total_cost_amount
        name: total_cost_amount
        description: The total cost amount for the position
        data_tests:
          - not_null
      - &ui_fee_receiver_factor
        name: ui_fee_receiver_factor
        description: The factor used to calculate the UI fee amount for the receiver
        data_tests:
          - not_null
      - &ui_fee_amount
        name: ui_fee_amount
        description: The total amount of UI fee collected
        data_tests:
          - not_null
      - &referral_total_rebate_factor
        name: referral_total_rebate_factor
        description: The total rebate factor associated with referrals.
        data_tests:
          - not_null
      - &referral_total_rebate_amount
        name: referral_total_rebate_amount
        description: The total rebate amount given for referrals.
        data_tests:
          - not_null
      - &referral_trader_discount_factor
        name: referral_trader_discount_factor
        description: The discount factor applied to the trader through referrals.
        data_tests:
          - not_null
      - &referral_adjusted_affiliate_reward_factor
        name: referral_adjusted_affiliate_reward_factor
        description: The adjusted affiliate reward factor based on referral criteria.
        data_tests:
          - not_null
      - &referral_affiliate_reward_amount
        name: referral_affiliate_reward_amount
        description: The reward amount given to the affiliate for referrals.
        data_tests:
          - not_null
      - &referral_trader_discount_amount
        name: referral_trader_discount_amount
        description: The discount amount given to the trader through referrals.
        data_tests:
          - not_null
      - &pro_trader_discount_factor
        name: pro_trader_discount_factor
        description: The discount factor applied for pro traders.
        data_tests:
          - not_null
      - &pro_trader_discount_amount
        name: pro_trader_discount_amount
        description: The discount amount given to pro traders.
        data_tests:
          - not_null
      - &liquidation_fee_amount
        name: liquidation_fee_amount
        description: The amount of fees charged during liquidation.
        data_tests:
          - not_null
      - &liquidation_fee_receiver_factor
        name: liquidation_fee_receiver_factor
        description: The factor used to calculate the liquidation fee allocated to the receiver.
        data_tests:
          - not_null
      - &liquidation_fee_amount_for_fee_receiver
        name: liquidation_fee_amount_for_fee_receiver
        description: The amount of liquidation fee allocated to the fee receiver.
        data_tests:
          - not_null
      - &is_increase
        name: is_increase
        description: Indicates whether the position is increased (true) or decreased (false)
        data_tests:
          - not_null
      - *order_key
      - *position_key
      - &referral_code
        name: referral_code
        description: The referral code associated with the position
        data_tests:
          - not_null   


  - name: gmx_v2_position_fees_info
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum','avalanche_c', 'gmx', 'event', 'position_fees_info']
    description: |
      This model extracts and parses `PositionFeesInfo` events from the Arbitrum and Avalanche blockchains.
      It includes details about the transaction, addresses involved, and various metrics related to 
      position fees, including fee amounts and related market data.
    
    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to 
      - name: event_name
        description: The type of event recorded, always 'PositionFeesInfo' for this model
        data_tests:
          - not_null
      - *msg_sender        
      - name: market
        description: The market associated with the position fees info event
        data_tests:
          - not_null
      - name: collateral_token
        description: The collateral token used in the position fees info event
        data_tests:
          - not_null
      - *affiliate
      - *trader
      - *ui_fee_receiver
      - *collateral_token_price_min
      - *collateral_token_price_max
      - *trade_size_usd
      - *funding_fee_amount
      - *claimable_long_token_amount
      - *claimable_short_token_amount
      - *latest_funding_fee_amount_per_size
      - *latest_long_token_claimable_funding_amount_per_size
      - *latest_short_token_claimable_funding_amount_per_size
      - *borrowing_fee_usd
      - *borrowing_fee_amount
      - *borrowing_fee_receiver_factor
      - *borrowing_fee_amount_for_fee_receiver
      - *position_fee_factor
      - *protocol_fee_amount
      - *position_fee_receiver_factor
      - *fee_receiver_amount
      - *fee_amount_for_pool
      - *position_fee_amount_for_pool
      - *position_fee_amount
      - *total_cost_amount
      - *ui_fee_receiver_factor
      - *ui_fee_amount
      - *referral_total_rebate_factor
      - *referral_total_rebate_amount
      - *referral_trader_discount_factor
      - *referral_adjusted_affiliate_reward_factor
      - *referral_affiliate_reward_amount
      - *referral_trader_discount_amount
      - *pro_trader_discount_factor
      - *pro_trader_discount_amount
      - *liquidation_fee_amount
      - *liquidation_fee_receiver_factor
      - *liquidation_fee_amount_for_fee_receiver
      - *is_increase
      - *order_key
      - *position_key
      - *referral_code


  - name: gmx_v2_order_frozen
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum','avalanche_c', 'gmx', 'event', 'order_frozen']
    description: |
      Extracts and decodes the `OrderFrozen` event log data from the Arbitrum and Avalanche blockchains. 
      This model processes log entries related to frozen orders, extracting key variables such as 
      account addresses, event keys, and strings representing the reason for the order being frozen.
    data_tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - tx_hash
            - key

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to      
      - name: event_name
        description: The type of event recorded, always 'OrderFrozen' for this model
        data_tests:
          - not_null 
      - *msg_sender         
      - name: key
        description: The key associated with the frozen order. Extracted as a bytes32 value
        data_tests:
          - not_null
      - name: account
        description: The address associated with the order 
      - name: reason_bytes
        description: The reason for the order being frozen in byte format.
        data_tests:
          - not_null
      - name: reason
        description: The reason for the order being frozen in string format.
        data_tests:
          - not_null


  - name: gmx_v2_order_updated
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'order_updated']
    description: |
      Extracts and decodes the `OrderUpdated` event log data from the Arbitrum and Avalanche blockchains. 
      This model processes log entries related to updated orders, extracting key variables such as 
      account addresses, event keys, and strings representing the reason for cancellation.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - *tx_from
      - *tx_to  
      - name: event_name
        description: The type of event recorded, always 'OrderUpdated' for this model.
        data_tests:
          - not_null
      - *msg_sender
      - name: key
        description: The key associated with the updated order. Extracted as a bytes32 value
        data_tests:
          - not_null
      - name: market
        description: The market in which the order was updated.
      - name: account
        description: The address associated with the order.
      - *size_delta_usd
      - *trigger_price_raw
      - *trigger_price
      - *acceptable_price_raw 
      - *acceptable_price
      - *min_output_amount_raw   
      - *updated_at_time
      - name: valid_from_time
        description: The time from which the order becomes valid for execution.
      - name: auto_cancel
        description: Boolean indicating whether the order will be automatically canceled under certain conditions.


  - name: gmx_v2_open_interest_in_tokens_updated
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'open_interest_in_tokens_updated']
    description: |
      Combines and processes decoded event data to produce a normalized dataset of updated orders 
      on the GMX platform for the Arbitrum and Avalanche blockchains. 
      This model integrates data from the `open_interest_in_tokens_updated` table, enriching it with market-specific details.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: event_name
        description: The type of event recorded, always 'OpenInterestInTokensUpdated' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: market
        description: The market in which the order was updated, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: collateral_token
        description: The token used as collateral for the order, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: is_long
        description: A boolean flag indicating whether the order is a long position (true) or short position (false).
      - name: next_value
        description: |
          Represents the updated open interest vlaue after the transaction. It is derived by normalizing 
          the raw value using index token decimals.
          This ensures consistent scaling of the value across tokens with varying decimals.
      - name: delta
        description: |
          Indicates the change in open interest. It is calculated by normalizing the raw delta value 
          using index token decimals.
          This normalization accounts for token decimal differences and provides a standardized measure of change.
      - name: tx_from
        description: The address that initiated the transaction
      - name: tx_to
        description: The destination address of the transaction
      - name: tx_index
        description: Index value related to the transaction


  - name: gmx_v2_open_interest_updated
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'open_interest_updated']
    description: |
      Extracts and processes decoded event data for open interest updates on the GMX platform, 
      specifically on the Arbitrum and Avalanche blockchains. This model normalizes data, including key metrics like 
      delta and next_value, ensuring consistent scaling based on token decimals.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: event_name
        description: The type of event recorded, always 'OpentInterestUpdated' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: market
        description: The market associated with the open interest update, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: collateral_token
        description: The token used as collateral for the open interest, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: is_long
        description: |
          A boolean flag indicating whether the open interest update is for a long position (true) or short position (false).
        data_type: boolean
      - name: delta
        description: |
          Represents the change in open interest value, normalized by dividing the raw delta by `POWER(10, 30)`. 
          This ensures consistent scaling for values across tokens with varying decimals.
        data_type: float
        data_tests:
          - not_null
      - name: next_value
        description: |
          Indicates the updated open interest value after the transaction, normalized by dividing 
          the raw value by `POWER(10, 30)` to ensure consistent scaling across tokens.
        data_type: float
        data_tests:
          - not_null
      - name: tx_from
        description: The address that initiated the transaction.
      - name: tx_to
        description: The destination address of the transaction.
      - name: tx_index
        description: The index value related to the transaction.


  - name: gmx_v2_oracle_price_update
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'oracle_price_update']
    description: |
      Processes decoded event data for Oracle Price Updates on the GMX platform in the Arbitrum and Avalanche blockchains. 
      The model normalizes price data (min_price and max_price) using token-specific decimals and extracts 
      additional details such as the provider and token involved in the update.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: event_name
        description: The type of event recorded, always 'OraclePriceUpdate' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: token
        description: The token associated with the oracle price update, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: provider
        description: The address of the price provider, decoded from a hexadecimal value.
      - name: min_price
        description: The minimum price reported by the oracle.
        data_tests:
          - not_null
      - name: max_price
        description: The maximum price reported by the oracle.
        data_tests:
          - not_null
      - name: timestamp
        description: The timestamp of the oracle price update.
        data_type: timestamp
      - name: tx_from
        description: The address that initiated the transaction.
      - name: tx_to
        description: The destination address of the transaction.
      - name: tx_index
        description: The index value related to the transaction, used for unique identification.


  - name: gmx_v2_pool_amount_updated
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'pool_amount_updated']
    description: |
      Processes decoded event data for Pool Amount Updates on the GMX platform in the Arbitrum and Avalanche blockchains.
      This model normalizes token values (next_value and delta) based on token-specific decimals and extracts
      additional details such as the market and token involved in the pool update.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: event_name
        description: The type of event recorded, always 'PoolAmountUpdated' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: market
        description: The market associated with the pool update, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: token
        description: The token involved in the pool update, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: next_value
        description: |
          The amount in the pool for the specified token, normalized by dividing the raw value
          by `POWER(10, token_decimals)`, where `token_decimals` is derived from ERC-20 token metadata.
        data_tests:
          - not_null
      - name: delta
        description: |
          The change in the pool amount for the specified token, normalized by dividing the raw value
          by `POWER(10, token_decimals)`, where `token_decimals` is derived from ERC-20 token metadata.
        data_tests:
          - not_null
      - name: tx_from
        description: The address that initiated the transaction.
      - name: tx_to
        description: The destination address of the transaction.
      - name: tx_index
        description: The index value related to the transaction, used for unique identification.


  - name: gmx_v2_set_uint
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'set_uint']
    description: |
      Processes decoded event data for `SetUint` events on the GMX platform in the Arbitrum and Avalanche blockchains.
      This model normalizes the value field and extracts additional details such as the base key and associated data,
      ensuring compatibility with downstream analyses.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: event_name
        description: The type of event recorded, always 'SetUint' for this model
        data_tests:
          - not_null 
      - *msg_sender
      - name: base_key
        description: The base key associated with the event, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: data
        description: The associated data field, decoded from a hexadecimal value.
        data_tests:
          - not_null
      - name: value_raw
        description: |
          The value associated with the event.
        data_type: float
        data_tests:
          - not_null
      - name: tx_from
        description: The address that initiated the transaction.
      - name: tx_to
        description: The destination address of the transaction.
      - name: tx_index
        description: The index value related to the transaction, used for unique identification.


  - name: gmx_v2_execution_fee_refund
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'execution_fee_refund']
    description: |
      Processes decoded event data for `ExecutionFeeRefund` events on the GMX platform in the Arbitrum and Avalanche blockchains.
      This model extracts key details such as the refund amount, receiver, and transaction details to 
      enable analysis of refunded execution fees.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: tx_from
        description: The address that initiated the transaction.
      - name: tx_to
        description: The destination address of the transaction.
      - name: event_name
        description: The type of event recorded, always `ExecutionFeeRefund` for this model.
        data_tests:
          - not_null
      - *msg_sender
      - name: receiver
        description: The address that received the refunded execution fee.
      - name: refund_fee_amount
        description: The amount of the refunded execution fee, denominated in the native token of the blockchain (e.g., ETH).


  - name: gmx_v2_keeper_execution_fee
    meta:
      blockchain: arbitrum, avalanche_c
      sector: dex
      project: gmx
      contributors: ai_data_master, gmx-io
    config:
      tags: ['arbitrum', 'avalanche_c', 'gmx', 'event', 'keeper_execution_fee']
    description: |
      Processes decoded event data for `KeeperExecutionFee` events on the GMX platform in the Arbitrum and Avalanche blockchains.
      This model extracts key details such as the keeper's address, execution fee amount, and transaction details, enabling
      analysis of fees associated with keeper-based executions.

    columns:
      - *blockchain
      - *block_time
      - *block_date
      - *block_number
      - *tx_hash
      - *index
      - *contract_address
      - name: tx_from
        description: The address that initiated the transaction.
      - name: tx_to
        description: The destination address of the transaction.
      - name: event_name
        description: The type of event recorded, always `KeeperExecutionFee` for this model.
        data_tests:
          - not_null
      - *msg_sender
      - name: keeper
        description: The address of the keeper responsible for executing the transaction.
      - name: execution_fee_amount
        description: The amount of the execution fee, denominated in the native token of the blockchain (e.g., ETH, AVAX).



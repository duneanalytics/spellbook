#Welcome to the NFT Spellbook!

name: "nft"
version: "1.0.0"
config-version: 2

quoting:
  database: false
  schema: false
  identifier: false

# This setting configures which "profile" dbt uses for this project.
# profile: "spellbook-poc-tokens"
profile: "spellbook-local"

vars:
  DBT_ENV_CUSTOM_ENV_S3_BUCKET: "{{ env_var('DBT_ENV_CUSTOM_ENV_S3_BUCKET', 'local') }}"
  DBT_ENV_INCREMENTAL_TIME: "{{ env_var('DBT_ENV_INCREMENTAL_TIME', '1') }}"
  DBT_ENV_INCREMENTAL_TIME_UNIT: "{{ env_var('DBT_ENV_INCREMENTAL_TIME_UNIT', 'day') }}"
  ETH_ERC20_ADDRESS: '0x0000000000000000000000000000000000000000'

# These configurations specify where dbt should look for different types of files.
# You don't need to change these!
model-paths: ["models", "../../sources"]
# ../tests/* should be added to a separate shared folder
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros", "../../dbt_macros"]

target-path: "target" # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring tests
# Full documentation: https://docs.getdbt.com/reference/test-configs
tests:
  nft:
    +store_failures: true  # store failures for all tests

# Configuring seeds
# Full documentation: https://docs.getdbt.com/reference/seed-configs
# For configuring individual seeds (e.g. overriding column types) we recommend a yml file nested in the same folder as the seed
# example: seeds/cryptopunks/schema.yml
seeds:
  nft:
    +schema: test_data

# defining search order of macro invokation
dispatch:
  - macro_namespace: dbt_utils
    search_order: ['trino_utils', 'dbt_utils']

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models
models:
  nft:
    +post-hook:
      - sql: "{{ set_trino_session_property(is_materialized(model), 'writer_scaling_min_data_processed', model.config.get('writer_min_size', '500MB')) }}"
        transaction: true
      - sql: "{{ set_trino_session_property(is_materialized(model), 'task_scale_writers_enabled', false) }}"
        transaction: true
      - sql: "{{ optimize_spell(this, model.config.materialized) }}"
        transaction: true
      - sql: "{{ mark_as_spell(this, model.config.materialized) }}"
        transaction: true
    +materialized: view
    +schema: no_schema    # this should be overriden in model specific configs
    +view_security: invoker


    seaport:
      +schema: seaport
      ethereum:
        +schema: seaport_ethereum
      bnb:
        +schema: seaport_bnb
      arbitrum:
        +schema: seaport_arbitrum
      optimism:
        +schema: seaport_optimism
      avalanche_c:
        +schema: seaport_avalanche_c
      polygon:
        +schema: seaport_polygon
      base:
        +schema: seaport_base
